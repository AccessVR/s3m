class t{constructor(e,a={}){this.file=e,this.options=a,this.chunkSize=a.chunk_size||t.DEFAULT_CHUNK_SIZE,this.maxConcurrentUploads=a.max_concurrent_uploads||t.DEFAULT_MAX_CONCURRENT_UPLOADS,this.fileName=e.name,this.fileSize=e.size,this.fileType=e.type}async startUpload(){if(!this.fileName)throw new Error("Filename is empty");const{data:t}=await axios.get("/s3m/create-multipart-upload",{params:{filename:this.fileName,content_type:this.fileType}});return t}async upload(){try{const{key:t,uploadId:e,uuid:a}=await this.startUpload(this.file);if(!e)return void console.error("Upload ID not found");const i=this.options.progress||(()=>{}),s=await this.uploadChunks(t,e,i),o=await this.completeUpload(t,e,s);return i(100),{uuid:a,key:t,extension:this.fileName.split(".").pop(),name:this.fileName,url:o}}catch(t){console.error(t)}}async uploadChunks(t,e,a){var i=this;const s=Math.ceil(this.fileSize/this.chunkSize),o=new Array(s).fill(0),r=[];let n=0,l=0;const u=Array.from({length:this.maxConcurrentUploads}).map(async function u(){if(l>=s)return;const p=l*i.chunkSize,c=Math.min(p+i.chunkSize,i.fileSize),h=i.file.slice(p,c);n++,l++;const d=l,m=await i.uploadChunk(t,e,d,h,s,o,a);r.push(m),n--,n<i.maxConcurrentUploads&&u()});for(await Promise.all(u);n>0;)await new Promise(t=>setTimeout(t,100));return r.sort((t,e)=>t.PartNumber-e.PartNumber)}async completeUpload(t,e,a){const{data:{url:i}}=await axios.post("/s3m/complete-multipart-upload",{parts:a,upload_id:e,key:t});return i}async getSignUrl(t,e,a){const{data:{url:i}}=await axios.get("/s3m/create-sign-part",{params:{filename:this.fileName,content_type:this.fileType,part_number:a,upload_id:e,key:t}});return i}async uploadChunk(t,e,a,i,s,o,r){const n=await this.getSignUrl(t,e,a);return{ETag:(await axios.put(n,i,{headers:{"Content-Type":this.fileType},onUploadProgress:t=>this.handleUploadProgress(t,s,a-1,o,r)})).headers.etag,PartNumber:a}}handleUploadProgress(t,e,a,i,s){const o=Math.round(100*t.loaded/t.total);i[a]=o,s(Math.round(i.reduce((t,e)=>t+e)/e))}}function e(e,a){return new t(e,a).upload()}t.DEFAULT_CHUNK_SIZE=10485760,t.DEFAULT_MAX_CONCURRENT_UPLOADS=5;export{e as s3m};
